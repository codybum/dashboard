{{> header}}
<!-- Breadcrumb-->
<ol class="breadcrumb">
    <li class="breadcrumb-item">Home</li>
    <li class="breadcrumb-item"><a href="/services/agents">Agents</a></li>
    <li class="breadcrumb-item active">{{ region }}-{{ agent }}</li>
    <!-- Breadcrumb Menu-->
    <li class="breadcrumb-menu d-md-down-none">
        <div class="btn-group" role="group" aria-label="Button group">

        </div>
    </li>
</ol>
<div class="container-fluid">
    <div class="animated fadeIn">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header">
                        <span style="font-size: 24px;"><i class="fa fa-align-justify"></i> Agent Details</span>
                        <div class="pull-right">
                        </div>
                    </div>
                    <div class="card-body pb-0">
                        <div class="row">
                            <div class="col-sm-12">
                                <div class="callout callout-info">
                                    <dl>
                                        <dt>Region</dt><dd>{{ region }}</dd>
                                        <dt>Agent</dt><dd>{{ agent }}</dd>
                                    </dl>
                                </div>
                                <div id="agent-details"></div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header">
                        <span style="font-size: 24px;"><i class="fa fa-align-justify"></i> Agent Status</span>
                    </div>
                    <div class="card-body pb-0">
                        <div class="row">
                            <div id="agent-status" class="col-sm-12"></div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript">
    let region = `{{{region}}}`;
    let agent = `{{{agent}}}`;
    const chartColors = {
        red: 'rgb(255, 99, 132)',
        orange: 'rgb(255, 159, 64)',
        yellow: 'rgb(255, 205, 86)',
        green: 'rgb(75, 192, 86)',
        blue: 'rgb(54, 162, 235)',
        purple: 'rgb(153, 102, 255)',
        grey: 'rgb(201, 203, 207)'
    };
    $(function() {
        resources(region, agent);
    });

    function resources(region, agent) {
        $.ajax({
            url: "/services/agents/resources/" + region + "/" + agent,
            success: function(json) {
                let agentJSON = JSON.parse(json.agentresourceinfo[0].perf);
                //console.log(agentJSON);
                let system = {};
                system.family = agentJSON.os[0]['sys-family'];
                system.manufacturer = agentJSON.os[0]['sys-manufacturer'];
                system.os = agentJSON.os[0]['sys-os'];
                if (agentJSON.cpu[0].is64bit === 'true')
                    system.architecture = '64-bit';
                else
                    system.architecture = '32-bit';
                system.uptime = secondsToStr(parseInt(agentJSON.os[0]['sys-uptime']));
                //console.log(system);
                let cpu = {};
                cpu.ident = agentJSON.cpu[0]['cpu-ident'];
                cpu.summary = agentJSON.cpu[0]['cpu-summary'];
                cpu.cores = {};
                cpu.cores.physical = parseInt(agentJSON.cpu[0]['cpu-physical-count']);
                cpu.cores.logical = parseInt(agentJSON.cpu[0]['cpu-logical-count']);
                cpu.load = {};
                cpu.load.idle = parseFloat(agentJSON.cpu[0]['cpu-idle-load']);
                cpu.load.nice = parseFloat(agentJSON.cpu[0]['cpu-nice-load']);
                cpu.load.user = parseFloat(agentJSON.cpu[0]['cpu-user-load']);
                cpu.load.system = parseFloat(agentJSON.cpu[0]['cpu-sys-load']);
                //console.log(cpu);
                let memory = {};
                memory.available = parseInt(agentJSON.mem[0]['memory-available']);
                memory.total = parseInt(agentJSON.mem[0]['memory-total']);
                //console.log(memory);
                let fs = [];
                $.each(agentJSON.fs, function (i, v) {
                    let tmp_fs = {};
                    tmp_fs.name = agentJSON.fs[i].name;
                    tmp_fs.uuid = agentJSON.fs[i].uuid;
                    tmp_fs.description = agentJSON.fs[i].description;
                    tmp_fs.total = parseInt(agentJSON.fs[i]['total-space']);
                    tmp_fs.available = parseInt(agentJSON.fs[i]['available-space']);
                    fs.push(tmp_fs);
                });
                //console.log(fs);
                let nics = [];
                $.each(agentJSON.net, function (i, v) {
                    let nic_info = agentJSON.net[i];
                    let tmp_nic_object = {};
                    tmp_nic_object.name = nic_info['interface-name'];
                    let tmp_ipv4 = nic_info['ipv4-addresses'].toString().replace(/[\[\]"]/g, "");
                    tmp_nic_object.ipv4 = tmp_ipv4.split(",");
                    let tmp_ipv6 = nic_info['ipv6-addresses'].toString().replace(/[\[\]"]/g, "");
                    tmp_nic_object.ipv6 = tmp_ipv6.split(",");
                    tmp_nic_object.mtu = parseInt(nic_info['mtu']);
                    nics.push(tmp_nic_object);
                });
                //console.log(nics);
                let details = "";
                details += "<div class='row'>";
                details += "<div class='col-md-6'>";
                details += `<div class='callout callout-info'><h3 class='title'>System (up for ${system.uptime})</h3>`;
                details += "<dl>";
                details += `<div class="callout callout-info"><small class="text-muted">Manufaturer</small><br><strong class="h6">${system.manufacturer}</strong></div>`;
                details += `<div class="callout callout-info"><small class="text-muted">OS</small><br><strong class="h6">${system.family} ${system.os} (${system.architecture})</strong></div>`;
                details += `<div class="callout callout-info"><small class="text-muted">CPU</small><br><strong class="h6">Type: </strong>${cpu.summary}<br><strong class="h6">Cores: </strong>${cpu.cores.physical} Physical, ${cpu.cores.logical} Logical<br></div>`;
                let memoryTotalFormatted = humanFileSize(memory.total, false);
                details += `<div class="callout callout-info"><small class="text-muted">Memory</small><br><strong class="h6">Total:</strong> ${memoryTotalFormatted}</div>`;
                details += "<div class='callout callout-info'><small class='text-muted'>Networking</small>";
                $.each(nics, function (i, nic) {
                    details += "<div class='callout callout-info'>";
                    details += `<strong class="h6"><u>${nic.name}</u></strong><br>`;
                    details += `<strong class="h6">MTU:</strong> ${nic.mtu}<br>`;
                    details += `<strong class="h6">IPv4:</strong> ${nic.ipv4}`;
                    if (nic.ipv6)
                        details += `<br><strong class="h6">IPv6:</strong> [${nic.ipv6}]`;
                    details += "</div>";
                });
                details += "</dl>";
                details += "</div>";
                details += "</div>";
                details += "</div>";
                $('#agent-details').html(details);
                //body += "<div class='col-md-6'>";
                let status = "<div class='row'>";
                status += "<div class='col-sm-12 col-md-6'><canvas id='agent-status-cpu-canvas' height=350></canvas></div>";
                status += "<div class='col-sm-12 col-md-6'><canvas id='agent-status-memory-canvas' height=350></canvas></div>";
                status += "</div>";
                $('#agent-status').html(status);
                const cpu_config = {
                        type: 'doughnut',
                        data: {
                            datasets: [{
                                data: [
                                    cpu.load.idle,
                                    cpu.load.nice,
                                    cpu.load.user,
                                    cpu.load.system
                                ],
                                backgroundColor: [
                                    chartColors.green,
                                    chartColors.red,
                                    chartColors.orange,
                                    chartColors.blue
                                ],
                                label: 'Dataset 1'
                            }],
                            labels: [
                                'Idle',
                                'Nice',
                                'User',
                                'System'
                            ]
                        },
                        options: {
                            responsive: true,
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                fontSize: 24,
                                text: 'Agent CPU Usage'
                            },
                            animation: {
                                animateScale: true,
                                animateRotate: true
                            },
                            tooltips: {
                                callbacks: {
                                    label: function(tooltipItem, data) {
                                        return `${data.datasets[0].data[tooltipItem.index]}%` ;
                                    }
                                }
                            }
                        }
                    };
                    new Chart(document.getElementById('agent-status-cpu-canvas').getContext('2d'), cpu_config);
                    const mem_config = {
                        type: 'doughnut',
                        data: {
                            datasets: [{
                                data: [
                                    memory.available,
                                    (memory.total - memory.available)
                                ],
                                backgroundColor: [
                                    chartColors.green,
                                    chartColors.red
                                ],
                                label: 'Dataset 1'
                            }],
                            labels: [
                                'Free',
                                'Used'
                            ]
                        },
                        options: {
                            responsive: true,
                            legend: {
                                position: 'top',
                            },
                            title: {
                                display: true,
                                fontSize: 24,
                                text: 'Agent Memory Usage'
                            },
                            animation: {
                                animateScale: true,
                                animateRotate: true
                            },
                            tooltips: {
                                callbacks: {
                                    label: function(tooltipItem, data) {
                                        return humanFileSize(data.datasets[0].data[tooltipItem.index], false);
                                    }
                                }
                            }
                        }
                    };
                    new Chart(document.getElementById('agent-status-memory-canvas').getContext('2d'), mem_config);
            },
            error: function(data) {
                console.error(data);
            }
        });
    }
    function humanFileSize(bytes, si) {
        let thresh = si ? 1000 : 1024;
        if(Math.abs(bytes) < thresh) {
            return bytes + ' B';
        }
        let units = si
                ? ['kB','MB','GB','TB','PB','EB','ZB','YB']
                : ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'];
        let u = -1;
        do {
            bytes /= thresh;
            ++u;
        } while(Math.abs(bytes) >= thresh && u < units.length - 1);
        return bytes.toFixed(1)+' '+units[u];
    }
    function secondsToStr (secs) {
        // TIP: to find current time in milliseconds, use:
        // var  current_time_milliseconds = new Date().getTime();

        function numberEnding (number) {
            return (number > 1) ? 's' : '';
        }

        let temp = secs; //Math.floor(milliseconds / 1000);
        let years = Math.floor(temp / 31536000);
        if (years) {
            return years + ' year' + numberEnding(years);
        }
        //TODO: Months! Maybe weeks?
        let days = Math.floor((temp %= 31536000) / 86400);
        if (days) {
            return days + ' day' + numberEnding(days);
        }
        let hours = Math.floor((temp %= 86400) / 3600);
        if (hours) {
            return hours + ' hour' + numberEnding(hours);
        }
        let minutes = Math.floor((temp %= 3600) / 60);
        if (minutes) {
            return minutes + ' minute' + numberEnding(minutes);
        }
        let seconds = temp % 60;
        if (seconds) {
            return seconds + ' second' + numberEnding(seconds);
        }
        return 'less than a second'; //'just now' //or other string you like;
    }
</script>
{{> footer}}