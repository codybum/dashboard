{{> header}}
<!-- Breadcrumb-->
<ol class="breadcrumb">
    <li class="breadcrumb-item">Home</li>
    <li class="breadcrumb-item"><a href="/services/applications">Applications</a></li>
    <li class="breadcrumb-item active">{{ app_id }}</li>
    <!-- Breadcrumb Menu-->
    <li class="breadcrumb-menu d-md-down-none">
        <div class="btn-group" role="group" aria-label="Button group">

        </div>
    </li>
</ol>
<div class="container-fluid">
    <div class="animated fadeIn">
        <div class="row">
            <div class="col-sm-12">
                <div class="card">
                    <div class="card-header">
                        <span style="font-size: 24px;"><i class="fa fa-align-justify"></i> Cresco Application Details</span>
                        <div class="pull-right">
                            <button type="button" class="btn btn-primary" onclick="exportApp();"><i class="fa fa-download" aria-hidden="true"></i> Export Application</button>
                            <button type="button" class="btn btn-secondary" data-toggle="modal" data-target="#pipeline-status-modal"><i class="fa fa-dashboard" aria-hidden="true"></i> Status</button>
                        </div>
                    </div>
                    <div class="card-body pb-0">
                        <div class="callout">
                            <h4>Information</h4><br>
                            <strong class="h6">Name</strong>: <span id=""></span><br>
                            <strong class="h6">Status</strong>: Blah
                        </div>
                        <div class="callout">
                            <h4>Plugins</h4><br>
                            <table id='nodes' class='table table-bordered table-striped' cellspacing="0" width='100%'>
                                <thead>
                                <tr>
                                    <td>ID</td>
                                    <td>Name</td>
                                    <td>Type</td>
                                    <td>Status</td>
                                </tr>
                                </thead>
                                <tbody>
                                </tbody>
                                <tfoot>
                                <tr>
                                    <td>ID</td>
                                    <td>Name</td>
                                    <td>Type</td>
                                    <td>Status</td>
                                </tr>
                                </tfoot>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="pipeline-export-modal" tabindex="-1" role="dialog" aria-labelledby="addGCModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title" id="pipeline-export-modal-title"></h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">x</span></button>
                    </div>
                    <div class="modal-body" id="pipeline-export-modal-body" style="max-height: 500px; overflow-y: scroll;">
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
        <div class="modal fade" id="pipeline-status-modal" tabindex="-1" role="dialog" aria-labelledby="addGCModalLabel" aria-hidden="true">
            <div class="modal-dialog modal-lg" role="document">
                <div class="modal-content">
                    <div class="modal-header">
                        <h4 class="modal-title">Current Status</h4>
                        <button type="button" class="close" data-dismiss="modal" aria-label="Close"><span aria-hidden="true">x</span></button>
                    </div>
                    <div class="modal-body" id="pipeline-export-modal-body" style="height: 500px;">
                        <div id="workspace" class="card-block" style="width: 100%; height: 100%;"></div>
                    </div>
                    <div class="modal-footer">
                        <button type="button" class="btn btn-secondary" data-dismiss="modal">Close</button>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
<script type="text/javascript" src="/services/js/d3.v3.min.js"></script>
<script type="text/javascript" src="/services/js/context-menu.js"></script>
<script type="text/javascript" src="/services/js/menu.js"></script>
<script type="text/javascript" src="/services/js/app-details.js"></script>
<script type="text/javascript">
    var app_name = $('#application-name');
    var app_status = $('#application-status');
    var node_table = $('#nodes');
    var node_table_body = $('#nodes tbody');
    var pipeline_id = "{{ app_id }}";
    var pipeline;
    var pipeline_export_modal = $('#pipeline-export-modal');
    var pipeline_export_modal_title = $('#pipeline-export-modal-title');
    var pipeline_export_modal_body = $('#pipeline-export-modal-body');
    $(function() {
        $.ajax({
            url: "/services/applications/info/" + pipeline_id,
            success: function(data) {
                pipeline = data;
                app_name.html(pipeline.pipeline_name);
                app_status.html(pipeline.status_desc);
                var body = '';
                $.each(pipeline.nodes, function (i, v) {
                    body += '<tr node_id="' + v.node_id + '" node_name="' + v.node_name + '" inode_id="' + v.params.inode_id + '" resource_id="' + v.params.resource_id + '">';
                    body += '<td>' + v.node_id + '</td>';
                    body += '<td>' + v.node_name + '</td>';
                    body += '<td>' + v.type + '</td>';
                    body += '<td>' + v.params.status_desc + '</td>';
                    body += '</tr>';
                });
                node_table_body.html(body);
                var nodes = node_table.DataTable({
                    "columns": [
                        {"visible": false},
                        {},
                        {},
                        {}
                    ]
                });
                node_table_body.on('click', 'tr', function () {
                    var tr = $(this);
                    if (!tr.attr('inode_id') || !tr.attr('resource_id'))
                        return;
                    var row = nodes.row(tr);
                    var node_id = tr.attr('node_id');
                    var node_name = tr.attr('node_name');
                    var inode_id = tr.attr('inode_id');
                    var resource_id = tr.attr('resource_id');
                    if (row.child.isShown()) {
                        row.child.hide();
                        tr.removeClass('shown');
                    } else {
                        $.ajax({
                            url: "/services/applications/nodeinfo/" + inode_id + "/" + resource_id,
                            success: function (nodeData) {
                                //var nodeData = nodeResponse['responseJSON'];
                                console.log(nodeData);
                                if (nodeData.isassignmentresourceinfo === null) {
                                    alert('Node data currently unavailable. Check back later.');
                                    return;
                                }
                                var tmpId = guid();
                                var nodeBody = "";
                                nodeBody += "<div class='row'>";
                                nodeBody += "<div class='col-md-12'>";
                                nodeBody += "<div class='card'>";
                                nodeBody += "<div class='card-block'>";
                                nodeBody += "<div class='card-title-block'><h3 class='title'>Node (Active for " + secondsToStr(nodeData.isassignmentresourceinfo.runTime) + ")</h3></div>";
                                nodeBody += "<br><dl>";
                                nodeBody += "<dt>Disk</dt><dd>Read: " + humanFileSize(nodeData.isassignmentresourceinfo.diskReadTotal, false) + " / Write: " + humanFileSize(nodeData.isassignmentresourceinfo.diskWriteTotal, false) + "</dd>";
                                nodeBody += "<dt>Network</dt><dd>RX: " + humanFileSize(nodeData.isassignmentresourceinfo.networkRxTotal, false) + " / TX: " + humanFileSize(nodeData.isassignmentresourceinfo.networkTxTotal, false) + "</dd>";
                                nodeBody += "</dl>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "<div class='row'>";
                                nodeBody += "<div class='col-md-12'>";
                                nodeBody += "<div class='col-md-6'><div class='card'><div class='card-block'><div class='card-title-block'><h3 class='title'>Node CPU Usage</h3></div><section class='example'><div id='" + tmpId + "-node-cpu'></div></section></div></div></div>";
                                nodeBody += "<div class='col-md-6'><div class='card'><div class='card-block'><div class='card-title-block'><h3 class='title'>Node Memory Usage</h3></div><section class='example'><div id='" + tmpId + "-node-memory'></div></section></div></div>";
                                //nodeBody += "<div class='col-md-12'>";
                                nodeBody += "<dl>";
                                nodeBody += "<dt>Memory</dt><dd>Average: " + humanFileSize(nodeData.isassignmentresourceinfo.memAve, false) + " / Max: " + humanFileSize(nodeData.isassignmentresourceinfo.memMax, false) + "</dd>";
                                nodeBody += "</dl>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "<div class='row'>";
                                nodeBody += "<div class='col-md-12'>";
                                nodeBody += "<div class='card'>";
                                nodeBody += "<div class='card-block'>";
                                nodeBody += "<div class='card-title-block'><h3 class='title'>Node Raw Output</h3></div>";
                                nodeBody += "<pre width='100%' style='overflow-x: auto'>" + syntaxHighlight(JSON.stringify(nodeData, undefined, 4)) + "</pre>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                nodeBody += "</div>";
                                //row.child('<pre>' + syntaxHighlight(JSON.stringify(nodeData, undefined, 4)) + '</pre>').show();
                                row.child(nodeBody).show();
                                /*$('#' + tmpId + '-node-cpu').empty();
                                Morris.Donut({
                                    element: tmpId + '-node-cpu',
                                    data: [
                                        {label: "Node", value: nodeData.isassignmentresourceinfo.cpuAve},
                                        {label: "System", value: (100 - nodeData.isassignmentresourceinfo.cpuAve)}
                                    ],
                                    resize: true,
                                    formatter: function (y) {
                                        return y.toFixed(2) + "%";
                                    }
                                });
                                $('#' + tmpId + '-node-memory').empty();
                                Morris.Donut({
                                    element: tmpId + '-node-memory',
                                    data: [
                                        {label: "Node", value: nodeData.isassignmentresourceinfo.memCurrent},
                                        {
                                            label: "System",
                                            value: nodeData.isassignmentresourceinfo.memLimit - nodeData.isassignmentresourceinfo.memCurrent
                                        }
                                    ],
                                    resize: true,
                                    colors: [
                                        "#35ff87",
                                        "#ff585b"
                                    ],
                                    formatter: function (y) {
                                        return humanFileSize(y, false);
                                    }
                                });*/
                            },
                            error: function (errorData) {
                                console.error(errorData);
                            }
                        });
                        /*var edges = '';
                        edges += '<div class="container">';
                        edges += '<div class="row">';
                        edges += '<div class="col-xs-12">';
                        edges += '<div class="card card-outline-secondary">';
                        edges += '<div class="card-header bordered">';
                        edges += '<div class="header-block"> ';
                        edges += '<h4 class="cresco-list-title">' + node_name + '\'s Edges</h4>';
                        edges += '</div>';
                        edges += '</div>';
                        edges += '<div class="card-block">';
                        edges += '<table id="' + node_id + '-edges" class="table table-bordered table-striped" cellspacing="0">';
                        edges += '<thead><tr><td>ID</td><td>From</td><td>To</td></tr></thead>';
                        edges += '<tbody>';
                        $.each(pipeline.edges, function(i, v) {
                            if (node_id === v.node_to || node_id === v.node_from || true) {
                                edges += '<tr>';
                                edges += '<td>' + v.edge_id + '</td>';
                                edges += '<td>' + v.node_from + '</td>';
                                edges += '<td>' + v.node_to + '</td>';
                                edges += '</tr>';
                            }
                        });
                        edges += '</tbody>';
                        edges += '<tfoot><tr><td>ID</td><td>From</td><td>To</td></tr></tfoot>';
                        edges += '</table>';
                        edges += '</div>';
                        edges += '</div>';
                        edges += '</div>';
                        edges += '</div>';
                        edges += '</div>';
                        row.child(edges).show();
                        $('#' + node_id + '-edges').DataTable();*/
                    }
                });
            },
            error: function(data) {
                console.error(data);
            }
        });
        $('#pipeline-status-modal').on('show.bs.modal', function() {
            if (active_menu != null)
                active_menu.hide();
            active_menu = null;
            active_menu_node = null;
            selected_node = null;
            selected_link = null;
            nodes.splice(0, nodes.length);
            links.splice(0, links.length);
            restart();
        });
        $('#pipeline-status-modal').on('shown.bs.modal', function() {
            showStatus();
            window.dispatchEvent(new Event('resize'));
        })
    });
    function exportApp() {
        $.ajax({
            url: "/services/applications/export/" + pipeline_id,
            success: function(json) {
                //var json = data['responseJSON'];
                pipeline_export_modal_title.html(pipeline_id);
                pipeline_export_modal_body.html('<pre>' + syntaxHighlight(JSON.stringify(json, undefined, 4)) + '</pre>');
                pipeline_export_modal.modal('show');
            },
            error: function(data) {
                console.error(data);
            }
        });
    }

    function showStatus() {
        $.ajax({
            url: "/services/applications/info/" + pipeline_id,
            success: function(json) {
                $.each(json.nodes, (i, v) => {
                    addExistingNode(v);
                });
                $.each(json.edges, (i, v) => {
                    addExistingEdge(v);
                });

            },
            error: function(data) {
                console.error(data);
            }
        });
    }

    function syntaxHighlight(json) {
        json = json.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;');
        return json.replace(/("(\\u[a-zA-Z0-9]{4}|\\[^u]|[^\\"])*"(\s*:)?|\b(true|false|null)\b|-?\d+(?:\.\d*)?(?:[eE][+\-]?\d+)?)/g, function (match) {
            var cls = 'number';
            if (/^"/.test(match)) {
                if (/:$/.test(match)) {
                    cls = 'key';
                } else {
                    cls = 'string';
                }
            } else if (/true|false/.test(match)) {
                cls = 'boolean';
            } else if (/null/.test(match)) {
                cls = 'null';
            }
            if (match.length > 100)
                match = match.substr(0, 100);
            return '<span class="' + cls + '">' + match + '</span>';
        });
    }
    function humanFileSize(bytes, si) {
        var thresh = si ? 1000 : 1024;
        if(Math.abs(bytes) < thresh) {
            return bytes + ' B';
        }
        var units = si
                ? ['kB','MB','GB','TB','PB','EB','ZB','YB']
                : ['KiB','MiB','GiB','TiB','PiB','EiB','ZiB','YiB'];
        var u = -1;
        do {
            bytes /= thresh;
            ++u;
        } while(Math.abs(bytes) >= thresh && u < units.length - 1);
        return bytes.toFixed(1)+' '+units[u];
    }
    function secondsToStr (secs) {
        // TIP: to find current time in milliseconds, use:
        // var  current_time_milliseconds = new Date().getTime();

        function numberEnding (number) {
            return (number > 1) ? 's' : '';
        }

        var temp = secs; //Math.floor(milliseconds / 1000);
        var years = Math.floor(temp / 31536000);
        if (years) {
            return years + ' year' + numberEnding(years);
        }
        //TODO: Months! Maybe weeks?
        var days = Math.floor((temp %= 31536000) / 86400);
        if (days) {
            return days + ' day' + numberEnding(days);
        }
        var hours = Math.floor((temp %= 86400) / 3600);
        if (hours) {
            return hours + ' hour' + numberEnding(hours);
        }
        var minutes = Math.floor((temp %= 3600) / 60);
        if (minutes) {
            return minutes + ' minute' + numberEnding(minutes);
        }
        var seconds = temp % 60;
        if (seconds) {
            return seconds + ' second' + numberEnding(seconds);
        }
        return 'less than a second'; //'just now' //or other string you like;
    }
    function guid() {
        function s4() {
            return Math.floor((1 + Math.random()) * 0x10000)
                    .toString(16)
                    .substring(1);
        }
        return s4() + s4() + '-' + s4() + '-' + s4() + '-' +
                s4() + '-' + s4() + s4() + s4();
    }
</script>
{{> footer}}
